# -*-perl-*-

# PDL Configuration options

# You can edit this here or say 'perl Makefile.PL PDLCONF=file'
# or use ~/.perldl.conf

# Note in general "0" means False, "1" means "True" and "undef"
# means "Try if possible (e.g. because the library is found)"

%PDL_CONFIG = (

# Decides if the output of attempts to link various function
# during 'perl Makefile.PL' will be hidden when building PDL
# should only be set to 0 for debugging purposes
# see also L<trylink|PDL::Core::Dev/trylink>

	HIDE_TRYLINK => 1,

# you can set machine specific optimizations here
# the settings will be passed to the toplevel Makefile.PL
# which *should* pass it to any recursively invoked ones

	OPTIMIZE => undef, # '-g',

# Use posix threading to make use of multiprocessor machines
# undef -> try if possible
# 0 -> don't use
# true -> force use

	WITH_POSIX_THREADS => undef,  	

	MALLOCDBG => undef,
# {
#			include => '-I/home/csoelle/tmp',
#			libs => '-L/home/csoelle/tmp -lmymalloc',
#			define => << 'EOD',
##define malloc(n) dbgmalloc(n,__FILE__,__LINE__)
##define free(p) dbgfree(p)
#EOD
#			include => '',
#			libs => '-lefence',
#			define => '',
#                     },

# Do we want routines to handle bad values?
#   saying no will make PDL a bit faster
# true  -> yes
# false -> no, undef -> no
#
	WITH_BADVAL => 0,
#	WITH_BADVAL => 1,

# if WITH_BADVAL == 1, do we use NaN/Inf to represent badvalues
# (not convinced setting this results in faster code)
#
	BADVAL_USENAN => 0,
#	BADVAL_USENAN => 1,

# Try to build Graphics/TriD
	WITH_3D => 0,
#
#  For Mesa 3.2
#
#	OPENGL_LIBS => '-L/usr/local/Mesa/lib -lGL -lGLU -lXext -lX11',
#  Mesa need -DGL_GLEXT_LEGACY for glPolygonOffsetEXT amoung others
#
#	OPENGL_DEFINE => '-DGL_GLEXT_LEGACY',
# 	OPENGL_INC => '-I/usr/include/GL/',
#
# 
# For SGI GL
#
#	OPENGL_LIBS => '-lGL -lGLU -lXext -lX11',
# 	OPENGL_INC => '',
#	OPENGL_DEFINE => '',
#
# Let perl try to figure it out
	OPENGL_LIBS => undef,
 	OPENGL_INC => undef,
	OPENGL_DEFINE => undef,
# Whether or not to build the Karma interface module

        WITH_KARMA => undef,    # Leave it up to PDL to decide
        WHERE_KARMA => undef,   # you may explicitly specify directory location

#
## Whether or not to build the PLplot interface module
#

# automatic settings
        WITH_PLPLOT          => undef,   # Leave it up to PDL to decide
        WHERE_PLPLOT_LIBS    => undef,   # let PDL search for plplot installation
        WHERE_PLPLOT_INCLUDE => undef,   # let PDL search for plplot installation

# example manual settings:
#        WITH_PLPLOT          => 1,      # Build PLPLOT interface
#        WHERE_PLPLOT_LIBS    => '/usr/local/plplot/lib',     # here is the PLplot lib dir
#        WHERE_PLPLOT_INCLUDE => '/usr/local/plplot/include', # here is the PLplot include dir

	
# Whether or not to build the PDL::Slatec module
# 0 -> don't use
# true -> force use

        WITH_SLATEC => undef,    # Leave it up to PDL to decide

# Whether or not to build the PDL::GSL module
# 0 -> don't use
# true -> force use

        WITH_GSL => 0,    # Leave it up to PDL to decide

# link flags for the GSL libs, e.g. '-L/usr/local/lib -lgsl -lm'
	GSL_LIBS => undef, # use gsl-config
# Location to find GSL includes:
 	GSL_INC => undef, # use gsl-config

# Whether or not to build the PDL::FFTW module
# 0 -> don't use
# true -> force use

        WITH_FFTW => undef,    # Leave it up to PDL to decide

# Location to search for the FFTW libs
	FFTW_LIBS => [ '/lib','/usr/lib','/usr/local/lib'],
# Location to find FFTW includes:
 	FFTW_INC => ['/usr/include/','/usr/local/include'],

# FFTW Numeric Precision Type to link in: (double or single precision)
	FFTW_TYPE => 'double',
	
# do we build PDL::IO::Browser?
#  - on some systems (eg OS-X) it won't build and I don't know enough
#    about curses to fix it 
#  - 1 builds, 0 or undef does not build
#
        WITH_IO_BROWSER => 0,
);

1; # Return OK status on 'require'
